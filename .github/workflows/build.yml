name: Build and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.4'
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -race -vet=off ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            platform: linux-amd64
          - goos: linux
            goarch: arm64
            platform: linux-arm64
          - goos: linux
            goarch: arm
            goarm: 7
            platform: linux-arm-v7
          - goos: linux
            goarch: 386
            platform: linux-386
          
          # Windows builds
          - goos: windows
            goarch: amd64
            platform: windows-amd64
            extension: .exe
          - goos: windows
            goarch: arm64
            platform: windows-arm64
            extension: .exe
          - goos: windows
            goarch: 386
            platform: windows-386
            extension: .exe
          
          # macOS builds
          - goos: darwin
            goarch: amd64
            platform: darwin-amd64
          - goos: darwin
            goarch: arm64
            platform: darwin-arm64
          
          # FreeBSD builds
          - goos: freebsd
            goarch: amd64
            platform: freebsd-amd64
          - goos: freebsd
            goarch: arm64
            platform: freebsd-arm64
          
          # OpenBSD builds
          - goos: openbsd
            goarch: amd64
            platform: openbsd-amd64
          - goos: openbsd
            goarch: arm64
            platform: openbsd-arm64
          
          # NetBSD builds
          - goos: netbsd
            goarch: amd64
            platform: netbsd-amd64
          - goos: netbsd
            goarch: arm64
            platform: netbsd-arm64

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.4'
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        BINARY_NAME="dotenv-${{ matrix.platform }}${{ matrix.extension }}"
        go build -ldflags="-s -w" -o "dist/${BINARY_NAME}" .
        
        # Create checksum
        if command -v sha256sum >/dev/null 2>&1; then
          cd dist && sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
        elif command -v shasum >/dev/null 2>&1; then
          cd dist && shasum -a 256 "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: dotenv-${{ matrix.platform }}
        path: |
          dist/dotenv-${{ matrix.platform }}${{ matrix.extension }}
          dist/dotenv-${{ matrix.platform }}${{ matrix.extension }}.sha256
        retention-days: 30

  release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -type f -name "dotenv-*" -exec cp {} release-assets/ \;
        ls -la release-assets/
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
